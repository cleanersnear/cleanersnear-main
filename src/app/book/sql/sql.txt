create table quick_customers (
  id uuid primary key default gen_random_uuid(),
  first_name text not null,
  last_name text not null,
  email text not null unique,
  phone text,
  street text,
  suburb text,
  state text,
  postcode text,
  additional_info text,
  created_at timestamp with time zone default timezone('utc'::text, now())
);



create table quick_bookings (
  id uuid primary key default gen_random_uuid(),
  customer_id uuid references quick_customers(id) on delete set null,
  booking_type text not null,
  frequency text not null,
  booking_category text,
  service_type text,
  min_hours integer,
  min_amount numeric,
  base_rate numeric,
  extra_hours integer,
  total_hours integer,
  total_price numeric,
  address_street text,
  address_suburb text,
  address_state text,
  address_postcode text,
  address_additional_info text,
  preferred_date date,
  time_preference text,
  created_at timestamp with time zone default timezone('utc'::text, now())
);



-- First, add the column as nullable
ALTER TABLE quick_bookings
ADD COLUMN booking_number text;

-- Create a temporary sequence for updating existing records
CREATE SEQUENCE temp_booking_seq;

-- Update existing records with sequential numbers using a CTE
WITH ordered_bookings AS (
    SELECT id, created_at
    FROM quick_bookings
    ORDER BY created_at
)
UPDATE quick_bookings qb
SET booking_number = 'QBK-' || LPAD(nextval('temp_booking_seq')::text, 4, '0')
FROM ordered_bookings ob
WHERE qb.id = ob.id;

-- Drop the temporary sequence
DROP SEQUENCE temp_booking_seq;

-- Finally, make it NOT NULL and UNIQUE
ALTER TABLE quick_bookings
ALTER COLUMN booking_number SET NOT NULL,
ADD CONSTRAINT quick_bookings_booking_number_key UNIQUE (booking_number);